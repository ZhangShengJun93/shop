package cn.wolfcode.shop.controller;import cn.wolfcode.shop.domain.User;import cn.wolfcode.shop.service.IOrderReturnService;import cn.wolfcode.shop.service.IUserService;import cn.wolfcode.shop.util.JSONResult;import com.alibaba.dubbo.config.annotation.Reference;import io.swagger.annotations.Api;import io.swagger.annotations.ApiImplicitParam;import io.swagger.annotations.ApiImplicitParams;import io.swagger.annotations.ApiOperation;import org.springframework.web.bind.annotation.RequestMapping;import org.springframework.web.bind.annotation.RequestMethod;import org.springframework.web.bind.annotation.ResponseBody;import org.springframework.web.bind.annotation.RestController;@RestController@RequestMapping("users")@Api(value = "用户相关", description = "用户操作:包括注册,登陆等一些操作", produces = "application/json", protocols = "https")public class UserController {    @Reference    private IUserService userService;    @Reference    private IOrderReturnService orderReturnService;    /**     * 注册接口     *     * @param user     * @return     */    @RequestMapping(value = "register", method = RequestMethod.POST, produces = "application/json")    @ApiOperation(value = "注册接口", notes = "这是给前端界面用来注册使用的", code = 200, httpMethod = "POST", response = JSONResult.class)    @ApiImplicitParams({@ApiImplicitParam(value = "用户名", name = "username", dataType = "String", required = true, paramType = "form"),            @ApiImplicitParam(value = "密码", name = "password", dataType = "String", required = true, paramType = "form")})    public JSONResult register(User user) {        JSONResult jsonResult = new JSONResult();        try {            user = userService.register(user);            if (user != null) {                jsonResult.setResult(user);            } else {                throw new RuntimeException("用户名已存在");            }        } catch (Exception e) {            jsonResult.setMessage(e.getMessage());        }        return jsonResult;    }    /**     * 用户登陆接口     *     * @param username     * @param password     * @return     */    @RequestMapping(value = "login", method = RequestMethod.POST, consumes = "application/x-www-form-urlencoded",            produces = "application/json")    @ApiOperation(value = "登陆接口", notes = "这是给前端界面用来登陆使用的", code = 200, httpMethod = "POST", response = JSONResult.class)    @ApiImplicitParams({@ApiImplicitParam(value = "用户名", name = "username", dataType = "String", required = true, paramType = "query"),            @ApiImplicitParam(value = "密码", name = "password", dataType = "String", required = true, paramType = "query")})    public JSONResult login(String username, String password) {        JSONResult jsonResult = new JSONResult();        try {            String token = userService.login(username, password);            jsonResult.setResult(token);        } catch (Exception e) {            jsonResult.setMessage(e.getMessage());        }        return jsonResult;    }    @RequestMapping(value = "return", method = RequestMethod.POST, consumes = "application/x-www-form-urlencoded",            produces = "application/json")    @ApiOperation(value = "申请退货接口", notes = "这是给前端界面用来退货使用的", code = 200, httpMethod = "POST", response = JSONResult.class)    @ApiImplicitParams({@ApiImplicitParam(value = "订单id", name = "orderId", dataType = "Long", required = true, paramType = "form"),            @ApiImplicitParam(value = "退货原因", name = "reason", dataType = "String", required = true, paramType = "form")})    @ResponseBody    public JSONResult orderReturn(Long orderId, String reason) {        JSONResult jsonResult = new JSONResult();        try {            orderReturnService.insert(orderId, reason);        } catch (Exception e) {            e.printStackTrace();            jsonResult.setMessage(e.getMessage());        }        return jsonResult;    }}